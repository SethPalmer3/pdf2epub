

from logging import raiseExceptions


class CharacterConverter:

    def __init__(self, input: str) -> None:
        """Takes in the string generated by the image_to_boxes function of
        pytesseract and gives a generator of the Character class"""
        self.lines = input.split('\n')
        self.current_line = 0
        self.len = len(self.lines)

    def __iter__(self):
        return self

    def __len__(self):
        return self.len
    
    def __next__(self):
        if self.current_line >= self.len:
            raise StopIteration

        spt = self.lines[self.current_line].split(' ')
        while len(spt) < 6:
            self.current_line += 1
            if self.current_line >= self.len:
                raise StopIteration
            spt = self.lines[self.current_line].split(' ')
        character, left, bottom, right, top, page = spt
        self.current_line += 1

        return Character(character, int(left), int(bottom), int(right), int(top), int(page))

        


class Character:
    def __init__(self, character: str, left: int, bottom: int, right: int, top: int, page_num: int, *args) -> None:
        self.character = character
        self.left_side = left
        self.bottom_side = bottom
        self.right_side = right
        self.top_side = top
        self.page_num = page_num
        self.width = self.right_side - self.left_side
        self.height = self.top_side - self.bottom_side
        self.data = args

    def vertical_intersection(self, other: "Character") -> bool:
        return self.top_side < other.top_side < self.bottom_side or \
                other.top_side < self.top_side < other.bottom_side

    def __str__(self) -> str:
        return f"{self.character} {self.left_side} {self.bottom_side} {self.right_side} {self.top_side}"

class Line:
    def __init__(self, characters: list[Character]) -> None:
        pass

class LineGenerator:
    def __init__(self, character_generator) -> None:
        self.char_gen = character_generator
        self.char_index = 0

    def __next__(self):
        pass

